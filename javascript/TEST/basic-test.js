const actual = true
const expected = false
if (actual !== expected) {
  throw new Error(`${actual} is not ${expected}`)
}

var INF = 9999;

var linked[16] = [
  "xxx.............",
  "...x...x.x.x....",
  "....x.....x...xx",
  "x...xxxx........",
  "......xxx.x.x...",
  "x.x...........xx",
  "...x..........xx",
  "....xx.x......xx",
  ".xxxxx..........",
  "...xxx...x...x.."
];

// 첫줄에는 테스트 케이스 개수
/**
 * 16개의 정수로 주어지며, 0~15번까지 각 시계가 가리키고 있는 시간을 12, 3, 6, 9중 하나로 표현
 *
 * 시계들을 모두 12시로 돌려놓기 위해 스위치를 눌러야 할 최소 횟수
 * 불가능할 경우 -1
 *
 * 입력예:
    2
    12 6 6 6 6 6 12 12 12 12 12 12 12 12 12 12
    12 9 3 12 6 6 9 3 12 9 12 9 12 12 6 6
    출력예:
    2
    9


    스위치 누르는 순서 중요 ㄴㄴ
    스위치를 몇 번이나 누를 것이냐가 중요.
    완전 탐색 알고리즘 사용시 스위치를 누르는 횟수의 모든 조합 열거 할 수 있어야함. 각 스위치를 몇 번 누르는지 상관 ㄴㄴ.

    어떤 스위치건 최대 세번이상 누를 일 없음. 왜냐면 6시간씩 앞으로 이동하니까

    1. 모든 시계가 12시 가리키는지 확인
    2. 0번째 스위치부터 4번씩 눌러 연결된 시계의 시침을 돌린다.
    3. 2번을 10번 반복할 때까지 구한 경우의 수를 반환하고 모든 시침이 12시가 되지 못했다면, INF를 반환하여 -1을 출력한다.

 */


